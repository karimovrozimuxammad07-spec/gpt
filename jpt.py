import telebot
from telebot import types
import requests
import re
from bs4 import BeautifulSoup
from openai import OpenAI
import json
import os
import time
from urllib.parse import quote

# üîë –¢–æ–∫–µ–Ω—ã
BOT_TOKEN = "8423562795:AAEucyAssbf--3Kv-y9fTP_ho9xN6Daqzyw"
OPENAI_API_KEY = "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"

# üìÇ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = r"C:\Users\user\Desktop\ALTRON\users.json"

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r") as f:
        try:
            content = f.read().strip()
            users = set(json.loads(content)) if content else set()
        except json.JSONDecodeError:
            users = set()
else:
    users = set()

def save_users():
    with open(USERS_FILE, "w") as f:
        json.dump(list(users), f)

# --- –ö–ª–∏–µ–Ω—Ç—ã
bot = telebot.TeleBot(BOT_TOKEN, parse_mode=None)
client = OpenAI(api_key=OPENAI_API_KEY)

# --- GPT (—É–ª—É—á—à–µ–Ω —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞)
def ask_gpt(prompt: str) -> str:
    try:
        system_prompt = (
            "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–º–Ω—ã–π –∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ ALTRON. "
            "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫: –¥–æ–±–∞–≤–ª—è–µ—à—å —ç–º–æ—Ü–∏–∏, –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, "
            "–æ–±—ä—è—Å–Ω—è–µ—à—å –ø–æ–Ω—è—Ç–Ω–æ, –∏–Ω–æ–≥–¥–∞ —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—É—Ö–∏–µ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ '–∫–∞–∫ –ò–ò-–º–æ–¥–µ–ª—å', –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫."
        )
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            temperature=0.8
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}"

# --- –ü–æ–≥–æ–¥–∞ –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
def get_weather_auto(message_text):
    try:
        parts = message_text.lower().split("–ø–æ–≥–æ–¥–∞")
        city = parts[1].strip() if len(parts) > 1 and parts[1].strip() else "Andijan"
        city_encoded = quote(city)
        url = f"https://wttr.in/{city_encoded}?format=3"
        res = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
        if res.status_code == 200 and "Unknown location" not in res.text:
            return f"üìç –ü–æ–≥–æ–¥–∞ –¥–ª—è {city.title()}: {res.text}"
        else:
            return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}"

# --- –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ YouTube –±–µ–∑ API
def search_youtube(query):
    try:
        query = query.replace(" ", "+")
        url = f"https://www.youtube.com/results?search_query={query}"
        headers = {"User-Agent": "Mozilla/5.0"}
        res = requests.get(url, headers=headers).text
        match = re.search(r"\/watch\?v=(\S{11})", res)
        if match:
            video_id = match.group(1)
            return f"üé¨ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\nhttps://www.youtube.com/watch?v={video_id}"
        else:
            return "‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ: {e}"

# --- –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
def search_google(query):
    try:
        query = query.replace(" ", "+")
        url = f"https://www.google.com/search?q={query}"
        headers = {"User-Agent": "Mozilla/5.0"}
        res = requests.get(url, headers=headers)
        soup = BeautifulSoup(res.text, "html.parser")
        result = soup.find("div", class_="BNeawe vvjwJb AP7Wnd")
        if result:
            return f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {result.text}\n–°—Å—ã–ª–∫–∞: https://www.google.com/search?q={query}"
        else:
            return "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"

# --- /start
@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.chat.id
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ALTRON GPT ‚Äî —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ\n\n"
        "–ú–æ–≥—É –¥–µ–ª–∞—Ç—å –º–Ω–æ–≥–æ–µ:\n"
        "‚Ä¢ üß† –û–±—â–∞—Ç—å—Å—è –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ (GPT-4)\n"
        "‚Ä¢ üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '–ø–æ–≥–æ–¥–∞ –ê–Ω–¥–∏–∂–∞–Ω'\n"
        "‚Ä¢ üé¨ –ù–∞–π—Ç–∏ –≤–∏–¥–µ–æ ‚Äî –Ω–∞–ø–∏—à–∏ 'youtube –∫–æ—Ç—ã'\n"
        "‚Ä¢ üîç –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ ‚Äî '–Ω–∞–π–¥–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –ò–ò'\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    )
    try:
        with open(r"C:\Users\user\Desktop\CHAT GPT BOT\KUAF_GPT_logo.jpg", "rb") as photo:
            bot.send_photo(user_id, photo, caption=welcome_text)
    except:
        bot.send_message(user_id, welcome_text)

# --- /stats
@bot.message_handler(commands=["stats"])
def show_stats(message):
    total_users = len(users)
    bot.send_message(message.chat.id, f"üë• Botdan foydalangan foydalanuvchilar soni: {total_users}")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    users.add(message.chat.id)
    save_users()
    user_text = message.text.strip()
    bot.send_chat_action(message.chat.id, "typing")

    # --- –ü–æ–≥–æ–¥–∞
    if "–ø–æ–≥–æ–¥–∞" in user_text.lower():
        bot.reply_to(message, get_weather_auto(user_text))
        return

    # --- YouTube
    if user_text.lower().startswith("youtube") or user_text.lower().startswith("—é—Ç—É–±"):
        query = user_text.lower().replace("youtube", "").replace("—é—Ç—É–±", "").strip()
        bot.reply_to(message, search_youtube(query))
        return

    # --- Google –ø–æ–∏—Å–∫
    if user_text.lower().startswith("–Ω–∞–π–¥–∏") or user_text.lower().startswith("search"):
        query = user_text.lower().replace("–Ω–∞–π–¥–∏", "").replace("search", "").strip()
        bot.reply_to(message, search_google(query))
        return

    # --- GPT (—Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç "–ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏")
    answer = ask_gpt(user_text)
    bot.reply_to(message, answer, parse_mode=None)

# --- –ó–∞–ø—É—Å–∫
while True:
    try:
        bot.polling(non_stop=True, interval=0, timeout=60)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] {e}")
        time.sleep(5)
